@page "/carrito"
@inject CarritoService CarritoService
@inject IJwtService JwtService
@using JhiroServer.Services
@using JhiroServer.Models
@inject NavigationManager NavigationManager


@using JhiroServer.Models
@using Microsoft.JSInterop

@code {
    private List<CarritoDTO> carritos = new();
    private bool isLoading = true;
    private string errorMessage;
    private string token;
    private bool isNavigatedToCarrito;

    protected override async Task OnInitializedAsync()
    {
        
        isLoading = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            if (NavigationManager.Uri.EndsWith("/carrito", StringComparison.OrdinalIgnoreCase))
            {
                isNavigatedToCarrito = true;

                token = await JwtService.GetTokenAsync();

                if (string.IsNullOrEmpty(token))
                {
                    
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    
                    await CargarCarrito();
                }
            }

            StateHasChanged(); 
        }
    }

    private async Task CargarCarrito()
    {
        if (!isNavigatedToCarrito) return;

        try
        {
            
            var carritosEnumerable = await CarritoService.GetCarritoByUsuarioId();
            carritos = carritosEnumerable.ToList();

            if (carritos == null || !carritos.Any())
            {
                errorMessage = "No tienes ningún producto en el carrito.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar el carrito: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ActualizarCantidad(int productoId, int nuevaCantidad)
    {
        try
        {
            if (nuevaCantidad < 1)
            {
                errorMessage = "La cantidad debe ser mayor a 0.";
                return;
            }

            bool exito = await CarritoService.ActualizarCantidad(productoId, nuevaCantidad);
            if (exito)
            {
                await CargarCarrito();
            }
            else
            {
                errorMessage = "Error al actualizar la cantidad.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al actualizar la cantidad: {ex.Message}";
        }
    }

    private async Task EliminarProducto(int productoId)
    {
        try
        {
            bool exito = await CarritoService.EliminarProductoDelCarrito(productoId);
            if (exito)
            {
                await CargarCarrito();
            }
            else
            {
                errorMessage = "Error al eliminar el producto.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar el producto: {ex.Message}";
        }
    }
}

@if (isLoading)
{
    <p>Cargando...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p>@errorMessage</p>
}
else
{
    <ul class="list-unstyled">
        @foreach (var item in carritos)
        {
            <li class="mb-3">
                <div class="d-flex align-items-center">
                    <img src="@item.ImagenUrl" alt="@item.NombreProducto" style="width: 50px; height: 50px; object-fit: cover;" class="me-3" />
                    <div>
                        <strong>@item.NombreProducto</strong><br />
                        <span>Precio Unitario: @item.PrecioProducto</span><br />
                        <span>Cantidad: @item.Cantidad</span>
                        <div>
                            <button class="btn btn-sm btn-secondary me-2" @onclick="() => ActualizarCantidad(item.ProductoId, item.Cantidad + 1)">+</button>
                            <button class="btn btn-sm btn-secondary me-2" @onclick="() => ActualizarCantidad(item.ProductoId, item.Cantidad - 1)">-</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(item.ProductoId)">Eliminar</button>
                        </div>
                        <span><strong>Precio Total: @($"{item.Cantidad * item.PrecioProducto}")</strong></span>
                    </div>
                </div>
            </li>
        }
    </ul>
}
