@page "/productos/{CategoriaId:int}"
@using JhiroServer.Services
@using JhiroServer.Models
@using Blazored.LocalStorage
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject ProductoService ProductoService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@if (Categoria == null)
{
    <p>Cargando datos...</p>
}
else
{
    <h1 style="text-align: center; color: #007bff;">@Categoria?.Nombre</h1>
    <p style="text-align: center; color: #6c757d;">@Categoria?.Publicidad</p>

    @if (productos == null)
    {
        <p>Cargando productos...</p>
    }
    else if (productos.Count == 0)
    {
        <p>No hay productos disponibles en esta categoría.</p>
    }
    else
    {
        <div class="container">
            @foreach (var row in GetRows(productos))
            {
                <div class="row">
                    @foreach (var producto in row)
                    {
                        <div class="col-md-4 mb-4">
                            <div class="card product-card shadow-sm border-light rounded">
                                <img src="@producto.ImagenUrl" class="card-img-top" @onclick="() => ShowModal(producto.ImagenUrl)" alt="@producto.Nombre">
                                <div class="card-body text-center">
                                    <h5 class="card-title">@producto.Nombre</h5>
                                    <p class="card-text">@producto.Descripcion</p>
                                    <p class="card-text font-weight-bold">Precio: @producto.Precio.ToString("C")</p>
                                    <p class="card-text text-muted">Stock: @producto.Stock</p>
                                    <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto)">Agregar al Carrito</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <div class="d-flex justify-content-between mt-3">
                <button @onclick="PreviousPage" class="btn btn-secondary" disabled="@(pageNumber == 1)">Anterior</button>
                <span class="align-self-center">Página @pageNumber</span>
                <button @onclick="NextPage" class="btn btn-secondary" disabled="@(productos.Count < pageSize)">Siguiente</button>
            </div>
        </div>
    }
}

<div id="imageModal" class="modal">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        <img id="modalImage" src="" alt="Imagen en grande">
    </div>
</div>

@code {
    [Parameter]
    public int CategoriaId { get; set; }
    private List<Producto> productos;
    private Categoria Categoria;
    private int pageNumber = 1;
    private const int pageSize = 6;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarProductos();
            Categoria = await ProductoService.GetCategoriaAsync(CategoriaId);
            await InicializarCarrito();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al inicializar datos: {ex.Message}");
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            productos = await ProductoService.GetProductosPorCategoriaAsync(CategoriaId, pageNumber);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos de la página {pageNumber}: {ex.Message}");
        }
    }

    private async Task InicializarCarrito()
    {
        var carritoDesdeLocalStorage = await LocalStorage.GetItemAsync<IEnumerable<CarritoDTO>>("carrito");

        if (carritoDesdeLocalStorage == null || !carritoDesdeLocalStorage.Any())
        {
            await LocalStorage.SetItemAsync("carrito", new List<CarritoDTO>());
        }
    }

    private async Task AgregarAlCarrito(Producto producto)
    {
        var carritoDesdeLocalStorage = await LocalStorage.GetItemAsync<IEnumerable<CarritoDTO>>("carrito") ?? Enumerable.Empty<CarritoDTO>();
        var itemEnCarrito = carritoDesdeLocalStorage.FirstOrDefault(c => c.ProductoId == producto.ProductoId);

        if (itemEnCarrito != null)
        {
            itemEnCarrito.Cantidad++;
        }
        else
        {
            var nuevoItem = new CarritoDTO
                {
                    ProductoId = producto.ProductoId,
                    ImagenUrl=producto.ImagenUrl,
                    NombreProducto=producto.Nombre,
                    PrecioProducto=producto.Precio,
                    UsuarioId = 0,
                    Cantidad = 1
                };
            carritoDesdeLocalStorage = carritoDesdeLocalStorage.Append(nuevoItem);
        }

        await LocalStorage.SetItemAsync("carrito", carritoDesdeLocalStorage.ToList());
        Console.WriteLine("Producto agregado al carrito.");
    }

    private IEnumerable<IEnumerable<Producto>> GetRows(List<Producto> productos)
    {
        for (int i = 0; i < productos.Count; i += 3)
        {
            yield return productos.Skip(i).Take(3);
        }
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await CargarProductos();
        }
    }

    private async Task NextPage()
    {
        pageNumber++;
        await CargarProductos();
    }

    private async Task ShowModal(string imageUrl)
    {
        await JsRuntime.InvokeVoidAsync("setImageModalSrc", imageUrl);
        await JsRuntime.InvokeVoidAsync("showImageModal");
    }

    private async Task CloseModal()
    {
        await JsRuntime.InvokeVoidAsync("hideImageModal");
    }
}
