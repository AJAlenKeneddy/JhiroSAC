@page "/pedido"
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage

@using JhiroServer.Models
@using JhiroServer.Services
@inject IJwtService JwtService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject PayPalService PayPalService
@using JhiroServer.Components

<h3>Realizar Pedido</h3>

@if (isLoggedIn)
{
    <div>
        <label for="correo">Correo Electrónico:</label>
        <input id="correo" @bind="correo" placeholder="Ingresa tu correo" />
    </div>

    <p>Total a Pagar: @totalAPagar.ToString("C")</p>

    <button @onclick="IrAPagar">Pagar con PayPal</button>

    <p>@mensaje</p>
}
else
{
    <Login />
}

@code {
    private string mensaje;
    private decimal totalAPagar;
    private string correo;
    private bool isLoggedIn;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Inicializando estado...");
            await InicializarEstado();
        }

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query["status"] != null)
        {
            Console.WriteLine($"Manejando respuesta de PayPal: {query["status"]}");
            await ManejarRespuestaPayPal(query.ToString());
        }
    }

    private async Task InicializarEstado()
    {
        try
        {
            Console.WriteLine("Obteniendo token...");
            var token = await JwtService.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Token obtenido con éxito.");
                correo = JwtService.GetCorreoFromToken(token);
                isLoggedIn = !string.IsNullOrEmpty(correo);
            }
            else
            {
                Console.WriteLine("No se encontró el token.");
                isLoggedIn = false;
            }

            await CalcularTotalAPagar();
        }
        catch (Exception ex)
        {
            mensaje = $"Error durante la carga inicial: {ex.Message}";
            Console.WriteLine(mensaje);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task IrAPagar()
    {
        try
        {
            var pedidoRequest = await CrearPedidoRequest();
            Console.WriteLine("Creando orden de PayPal...");
            var (approveUrl, token) = await PayPalService.CreatePayPalOrder(totalAPagar);
            mensaje = "Pedido realizado con éxito. Continúa con el proceso de PayPal.";

            await LocalStorage.SetItemAsync("paypalToken", token);
            Console.WriteLine($"Redirigiendo a PayPal: {approveUrl}");
            NavigationManager.NavigateTo(approveUrl);
        }
        catch (Exception ex)
        {
            mensaje = $"Error al iniciar el pago: {ex.Message}";
            Console.WriteLine(mensaje);
        }
    }

    private async Task<PedidoRequest> CrearPedidoRequest()
    {
        var carritos = await LocalStorage.GetItemAsync<List<CarritoDTO>>("carrito") ?? new List<CarritoDTO>();
        totalAPagar = carritos.Sum(item => item.PrecioProducto * item.Cantidad);

        return new PedidoRequest
            {
                Correo = correo,
                Productos = carritos.Select(item => new ProductoPedidoDTO
                {
                    ProductoId = item.ProductoId,
                    NombreProducto = item.NombreProducto,
                    Cantidad = item.Cantidad,
                    Precio = item.PrecioProducto,
                    ImagenUrl = item.ImagenUrl
                }).ToList()
            };
    }

    private async Task CalcularTotalAPagar()
    {
        try
        {
            var carritos = await LocalStorage.GetItemAsync<List<CarritoDTO>>("carrito") ?? new List<CarritoDTO>();
            totalAPagar = carritos.Sum(item => item.PrecioProducto * item.Cantidad);
            Console.WriteLine($"Total a pagar calculado: {totalAPagar.ToString("C")}");
        }
        catch (Exception ex)
        {
            mensaje = $"Error al calcular el total a pagar: {ex.Message}";
            Console.WriteLine(mensaje);
        }
    }

    private async Task ManejarRespuestaPayPal(string status)
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query["status"] == "success")
        {
            Console.WriteLine("Pago exitoso. Capturando el pago...");
            var token = await LocalStorage.GetItemAsync<string>("paypalToken");

            if (!string.IsNullOrEmpty(token))
            {
                var captureResponse = await PayPalService.CapturePayPalOrder(token);
                mensaje = captureResponse.IsSuccess ? "Pago capturado exitosamente." : captureResponse.Message;
                Console.WriteLine(mensaje);
            }
            else
            {
                mensaje = "No se recibió un token válido de PayPal.";
                Console.WriteLine(mensaje);
            }
        }
        else if (query["status"] == "cancelled")
        {
            mensaje = "El pago ha sido cancelado.";
            Console.WriteLine(mensaje);
        }

        await CalcularTotalAPagar();
    }
}
